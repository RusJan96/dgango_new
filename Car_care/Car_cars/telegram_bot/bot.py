
# TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'
# –±–æ—Ç —á–µ—Ä–µ–∑ deepseek 
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤
AUTO_SERVICES = {
    'toyota': {
        'maintenance': [
            {'name': 'Toyota Center', 'rating': 9.8, 'price': 5000},
            {'name': 'Toyota Pro', 'rating': 9.5, 'price': 4500}
        ],
        'body': [
            {'name': 'Toyota Body Repair', 'rating': 9.2, 'price': 12000},
            {'name': 'Elite Toyota', 'rating': 9.0, 'price': 10000}
        ]
    }, 
    'bmw': {
        'maintenance': [
            {'name': 'BMW Service', 'rating': 9.7, 'price': 7000},
            {'name': 'BMW Premium', 'rating': 9.6, 'price': 6500}
        ],
        'body': [
            {'name': 'BMW Body Masters', 'rating': 9.4, 'price': 15000},
            {'name': 'BMW Exclusive', 'rating': 9.3, 'price': 14000}
        ]
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='register')],
        [InlineKeyboardButton("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='find')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=reply_markup
        )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back_to_start':
        await start(update, context)
    elif query.data == 'register':
        await handle_register(query)
    elif query.data == 'find':
        await select_car_brand(query, context)
    elif query.data.startswith('brand_'):
        await select_repair_type(query, context)
    elif query.data.startswith('repair_'):
        await show_services(query, context)

async def handle_register(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin_username\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞\n"
        "- –ê–¥—Ä–µ—Å\n"
        "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é",
        reply_markup=reply_markup
    )

async def select_car_brand(query, context):
    """–í—ã–±–æ—Ä –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    keyboard = [
        [InlineKeyboardButton("Toyota", callback_data='brand_toyota')],
        [InlineKeyboardButton("BMW", callback_data='brand_bmw')],
        [InlineKeyboardButton("Audi", callback_data='brand_audi')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=reply_markup
    )

async def select_repair_type(query, context):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–µ–º–æ–Ω—Ç–∞"""
    brand = query.data.split('_')[1]
    context.user_data['brand'] = brand
    
    keyboard = [
        [InlineKeyboardButton("üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='repair_maintenance')],
        [InlineKeyboardButton("üöò –ö—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç", callback_data='repair_body')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='find')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {brand.capitalize()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç:",
        reply_markup=reply_markup
    )

async def show_services(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    brand = context.user_data.get('brand', '')
    repair_type = query.data.split('_')[1]
    
    services = AUTO_SERVICES.get(brand, {}).get(repair_type, [])
    
    if not services:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'brand_{brand}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
            reply_markup=reply_markup
        )
        return
    
    services_sorted = sorted(services, key=lambda x: x['rating'], reverse=True)
    
    services_text = "\n\n".join(
        f"üîπ {s['name']}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {s['rating']}/10\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {s['price']} —Ä—É–±."
        for s in services_sorted
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'brand_{brand}')],
        [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üîß –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è {brand.capitalize()} ({repair_type}):\n\n{services_text}",
        reply_markup=reply_markup
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    if update.callback_query:
        await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == '__main__':
    main()