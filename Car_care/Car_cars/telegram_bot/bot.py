
# TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'
# –±–æ—Ç —á–µ—Ä–µ–∑ deepseek 
# import logging
# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import (
#     Application,
#     CommandHandler,
#     CallbackQueryHandler,
#     ContextTypes,
#     MessageHandler,
#     filters
# )

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# # –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤
# AUTO_SERVICES = {
#     'toyota': {
#         'maintenance': [
#             {'name': 'Toyota Center', 'rating': 9.8, 'price': 5000},
#             {'name': 'Toyota Pro', 'rating': 9.5, 'price': 4500}
#         ],
#         'body': [
#             {'name': 'Toyota Body Repair', 'rating': 9.2, 'price': 12000},
#             {'name': 'Elite Toyota', 'rating': 9.0, 'price': 10000}
#         ]
#     }, 
#     'bmw': {
#         'maintenance': [
#             {'name': 'BMW Service', 'rating': 9.7, 'price': 7000},
#             {'name': 'BMW Premium', 'rating': 9.6, 'price': 6500}
#         ],
#         'body': [
#             {'name': 'BMW Body Masters', 'rating': 9.4, 'price': 15000},
#             {'name': 'BMW Exclusive', 'rating': 9.3, 'price': 14000}
#         ]
#     }
# }

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
#     keyboard = [
#         [InlineKeyboardButton("üõ†Ô∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='register')],
#         [InlineKeyboardButton("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='find')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     if update.message:
#         await update.message.reply_text(
#             "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
#             reply_markup=reply_markup
#         )
#     elif update.callback_query:
#         await update.callback_query.message.reply_text(
#             "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
#             reply_markup=reply_markup
#         )

# async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
#     query = update.callback_query
#     await query.answer()
    
#     if query.data == 'back_to_start':
#         await start(update, context)
#     elif query.data == 'register':
#         await handle_register(query)
#     elif query.data == 'find':
#         await select_car_brand(query, context)
#     elif query.data.startswith('brand_'):
#         await select_repair_type(query, context)
#     elif query.data.startswith('repair_'):
#         await show_services(query, context)

# async def handle_register(query):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
#     keyboard = [
#         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     await query.edit_message_text(
#         "üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin_username\n\n"
#         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
#         "- –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞\n"
#         "- –ê–¥—Ä–µ—Å\n"
#         "- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
#         "- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é",
#         reply_markup=reply_markup
#     )

# async def select_car_brand(query, context):
#     """–í—ã–±–æ—Ä –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
#     keyboard = [
#         [InlineKeyboardButton("Toyota", callback_data='brand_toyota')],
#         [InlineKeyboardButton("BMW", callback_data='brand_bmw')],
#         [InlineKeyboardButton("Audi", callback_data='brand_audi')],
#         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_text(
#         "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
#         reply_markup=reply_markup
#     )

# async def select_repair_type(query, context):
#     """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–µ–º–æ–Ω—Ç–∞"""
#     brand = query.data.split('_')[1]
#     context.user_data['brand'] = brand
    
#     keyboard = [
#         [InlineKeyboardButton("üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data='repair_maintenance')],
#         [InlineKeyboardButton("üöò –ö—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç", callback_data='repair_body')],
#         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='find')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
#     await query.edit_message_text(
#         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {brand.capitalize()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç:",
#         reply_markup=reply_markup
#     )

# async def show_services(query, context):
#     """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
#     brand = context.user_data.get('brand', '')
#     repair_type = query.data.split('_')[1]
    
#     services = AUTO_SERVICES.get(brand, {}).get(repair_type, [])
    
#     if not services:
#         keyboard = [
#             [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'brand_{brand}')]
#         ]
#         reply_markup = InlineKeyboardMarkup(keyboard)
        
#         await query.edit_message_text(
#             "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
#             reply_markup=reply_markup
#         )
#         return
    
#     services_sorted = sorted(services, key=lambda x: x['rating'], reverse=True)
    
#     services_text = "\n\n".join(
#         f"üîπ {s['name']}\n"
#         f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {s['rating']}/10\n"
#         f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {s['price']} —Ä—É–±."
#         for s in services_sorted
#     )
    
#     keyboard = [
#         [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'brand_{brand}')],
#         [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     await query.edit_message_text(
#         f"üîß –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è {brand.capitalize()} ({repair_type}):\n\n{services_text}",
#         reply_markup=reply_markup
#     )

# async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
#     logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
#     if update.callback_query:
#         await update.callback_query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     application = Application.builder().token(TOKEN).build()
    
#     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#     application.add_handler(CommandHandler('start', start))
#     application.add_handler(CallbackQueryHandler(handle_button))
#     application.add_error_handler(error_handler)
    
#     logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
#     application.run_polling()

# if __name__ == '__main__':
#     main()

# import logging
# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import (
#     Application,
#     CommandHandler,
#     CallbackQueryHandler,
#     ContextTypes,
#     MessageHandler,
#     filters,
#     ConversationHandler
# )

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'
# ADMIN_CHAT_ID = '123456789'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞
# NAME, SERVICES, PRICES, ADDRESS, PHONE, CONFIRM = range(6)

# # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ)

# async def start_registration(query, context):
#     """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
#     context.user_data['registration'] = {}
    
#     keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_start')]]
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     await query.edit_message_text(
#         "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
#         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞:",
#         reply_markup=reply_markup,
#         parse_mode='HTML'
#     )
    
#     return NAME

# async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
#     context.user_data['registration']['name'] = update.message.text
    
#     await update.message.reply_text(
#         "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–≤–∏–¥—ã —Ä–∞–±–æ—Ç</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
#         "–ü—Ä–∏–º–µ—Ä: –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, –†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏, –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
#         parse_mode='HTML'
#     )
    
#     return SERVICES

# async def get_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç"""
#     services = [s.strip() for s in update.message.text.split(',')]
#     context.user_data['registration']['services'] = services
    
#     await update.message.reply_text(
#         "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—ã</b> –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
#         "–ü—Ä–∏–º–µ—Ä: 1500, 2000, 1000",
#         parse_mode='HTML'
#     )
    
#     return PRICES

# async def get_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç—ã"""
#     prices = [p.strip() for p in update.message.text.split(',')]
#     services = context.user_data['registration']['services']
    
#     if len(prices) != len(services):
#         await update.message.reply_text(
#             "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç. "
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –µ—â–µ —Ä–∞–∑:",
#             parse_mode='HTML'
#         )
#         return PRICES
    
#     # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å
#     services_prices = dict(zip(services, prices))
#     context.user_data['registration']['services_prices'] = services_prices
    
#     await update.message.reply_text(
#         "üè† –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞:",
#         parse_mode='HTML'
#     )
    
#     return ADDRESS

# async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
#     context.user_data['registration']['address'] = update.message.text
    
#     await update.message.reply_text(
#         "üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è —Å–≤—è–∑–∏:",
#         parse_mode='HTML'
#     )
    
#     return PHONE

# async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
#     context.user_data['registration']['phone'] = update.message.text
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#     registration_data = context.user_data['registration']
#     services_text = "\n".join(
#         f"‚Ä¢ {service}: {price} —Ä—É–±." 
#         for service, price in registration_data['services_prices'].items()
#     )
    
#     summary_text = (
#         "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
#         f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {registration_data['name']}\n"
#         f"üõ†Ô∏è <b>–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:</b>\n{services_text}\n"
#         f"üè† <b>–ê–¥—Ä–µ—Å:</b> {registration_data['address']}\n"
#         f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {registration_data['phone']}\n\n"
#         "–í—Å—ë –≤–µ—Ä–Ω–æ?"
#     )
    
#     keyboard = [
#         [InlineKeyboardButton("‚úÖ –î–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data='confirm_registration')],
#         [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='restart_registration')]
#     ]
#     reply_markup = InlineKeyboardMarkup(keyboard)
    
#     await update.message.reply_text(
#         text=summary_text,
#         reply_markup=reply_markup,
#         parse_mode='HTML'
#     )
    
#     return CONFIRM

# async def confirm_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
#     query = update.callback_query
#     await query.answer()
    
#     if query.data == 'confirm_registration':
#         registration_data = context.user_data['registration']
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#         services_text = "\n".join(
#             f"‚Ä¢ {service}: {price} —Ä—É–±." 
#             for service, price in registration_data['services_prices'].items()
#         )
        
#         admin_message = (
#             "üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
#             f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {registration_data['name']}\n"
#             f"üè† –ê–¥—Ä–µ—Å: {registration_data['address']}\n"
#             f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {registration_data['phone']}\n\n"
#             f"üõ†Ô∏è <b>–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:</b>\n{services_text}\n\n"
#             f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}\n"
#             f"Username: @{update.effective_user.username if update.effective_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
#         )
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
#         try:
#             await context.bot.send_message(
#                 chat_id=ADMIN_CHAT_ID,
#                 text=admin_message,
#                 parse_mode='HTML'
#             )
            
#             keyboard = [
#                 [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
#                 [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
#             ]
#             reply_markup = InlineKeyboardMarkup(keyboard)
            
#             await query.edit_message_text(
#                 "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>\n\n"
#                 "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ "
#                 "–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ –≤ –Ω–∞—à—É –±–∞–∑—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: @admin_username",
#                 reply_markup=reply_markup,
#                 parse_mode='HTML'
#             )
            
#         except Exception as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
#             await query.edit_message_text(
#                 "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
#                 parse_mode='HTML'
#             )
    
#     elif query.data == 'restart_registration':
#         await start_registration(query, context)
    
#     return ConversationHandler.END

# def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     application = Application.builder().token(TOKEN).build()
    
#     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#     conv_handler = ConversationHandler(
#         entry_points=[CallbackQueryHandler(start_registration, pattern='^register_service$')],
#         states={
#             NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
#             SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_services)],
#             PRICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prices)],
#             ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
#             PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
#             CONFIRM: [CallbackQueryHandler(confirm_registration, pattern='^(confirm_registration|restart_registration)$')]
#         },
#         fallbacks=[
#             CommandHandler('cancel', cancel_registration),
#             CallbackQueryHandler(cancel_registration, pattern='^back_to_start$')
#         ]
#     )
    
#     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#     application.add_handler(CommandHandler('start', start))
#     application.add_handler(conv_handler)
#     application.add_handler(CallbackQueryHandler(handle_button))
#     application.add_error_handler(error_handler)
    
#     logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
#     application.run_polling()

# if __name__ == '__main__':
#     main()

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = '7942582757:AAHhO_vAUbO9_D0kpAIiq0SzOBUXNwcUsxY'
ADMIN_USERNAME = '@Batojan'  # Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞
NAME, SERVICES, PRICES, ADDRESS, PHONE = range(5)

# –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤ (–ø—Ä–∏–º–µ—Ä)
AUTO_SERVICES = {
    'AutoFRESH': {
        'rating': 9.7,
        'address': '–≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. –ö–∞—Ä–∞—É–ª—å–Ω–∞—è 9/2',
        'phone': '+7 (391) 123-45-67',
        'services': {
            '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫': 1000,
            '–†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏': 700,
            '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞': 1350
        }
    },
    'Skoda Auto': {
        'rating': 9.9,
        'address': '–≥. –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª. 9 –ú–∞—è –ê72',
        'phone': '+7 (391) 987-65-43',
        'services': {
            '–†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏': 600,
            '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –∫–æ—Ä–æ–±–∫–µ –ø–µ—Ä–µ–¥–∞—á': 1700
        }
    }
}

# –í–∏–¥—ã —Ä–µ–º–æ–Ω—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
REPAIR_TYPES = {
    '–í—Å–µ –≤–∏–¥—ã —Ä–µ–º–æ–Ω—Ç–∞': '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
    '–ê–≤—Ç–æ—ç–ª–µ–∫—Ç—Ä–∏–∫': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    '–†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏',
    '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞': '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ',
    '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –∫–æ—Ä–æ–±–∫–µ –ø–µ—Ä–µ–¥–∞—á': '–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –ê–ö–ü–ü/–ú–ö–ü–ü',
    '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': '–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
    '–†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è': '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π –∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç –î–í–°'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='find_service')],
        [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", callback_data='register_service')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user = update.effective_user
    welcome_message = (
        f"üöó <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ "
        "–∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–µ—Ä–≤–∏—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ."
    )
    
    if update.message:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == 'back_to_start':
            await start(update, context)
        elif query.data == 'find_service':
            await show_repair_types(query, context)
        elif query.data == 'register_service':
            await start_registration(query, context)
        elif query.data == 'support':
            await show_support(query)
        elif query.data.startswith('repair_'):
            repair_type = query.data.split('_')[1]
            await show_services_for_repair(query, context, repair_type)
        elif query.data.startswith('service_'):
            service_name = query.data.split('_')[1]
            repair_type = context.user_data.get('current_repair_type', '')
            await show_service_details(query, context, service_name, repair_type)
    except Exception as e:
          logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_button: {e}", exc_info=True)
          await query.edit_message_text(
           "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]])
        )

async def show_support(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, "
        f"—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}\n\n"
        "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_repair_types(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥—ã —Ä–µ–º–æ–Ω—Ç–∞"""
    keyboard = []
    for repair_type in REPAIR_TYPES:
        keyboard.append([InlineKeyboardButton(f"üîß {repair_type}", callback_data=f'repair_{repair_type}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')])
    keyboard.append([InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üõ†Ô∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–±–æ—Ç:</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_services_for_repair(query, context, repair_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Ä–µ–º–æ–Ω—Ç–∞"""
    context.user_data['current_repair_type'] = repair_type
    
    suitable_services = [
        (name, info) for name, info in AUTO_SERVICES.items() 
        if repair_type in info['services']
    ]
    
    if not suitable_services:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='find_service')],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üòï <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —É—Å–ª—É–≥—É '{repair_type}'.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∏–¥ —Ä–∞–±–æ—Ç\n"
            f"‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞\n"
            f"‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π {ADMIN_USERNAME}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    keyboard = []
    for service_name, service_info in suitable_services:
        price = service_info['services'][repair_type]
        keyboard.append([InlineKeyboardButton(
            f"üè¢ {service_name} ‚≠ê {service_info['rating']} - –æ—Ç {price} —Ä—É–±.",
            callback_data=f'service_{service_name}'
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='find_service')])
    keyboard.append([InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')])
    keyboard.append([InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üîß <b>–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ {repair_type}:</b>\n\n"
        f"<i>{REPAIR_TYPES.get(repair_type, '')}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def show_service_details(query, context, service_name, repair_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
    service_info = AUTO_SERVICES.get(service_name, {})
    price = service_info.get('services', {}).get(repair_type, '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    
    text = (
        f"üè¢ <b>{service_name}</b>\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {service_info.get('rating', '–Ω–µ—Ç')}/10\n"
        f"üè† –ê–¥—Ä–µ—Å: {service_info.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {service_info.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üîß <b>{repair_type}</b>\n"
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {price} —Ä—É–±.\n\n"
        f"<i>{REPAIR_TYPES.get(repair_type, '')}</i>"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'repair_{repair_type}')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
        [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='HTML')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        query = update.callback_query
        await query.answer()
        
        context.user_data['registration'] = {}
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back_to_start')]]
        
        await query.edit_message_text(
            "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_registration: {e}", exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]])
            )
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')]])
            )
        return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        context.user_data['registration']['name'] = update.message.text
        await update.message.reply_text(
            "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–≤–∏–¥—ã —Ä–∞–±–æ—Ç</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞—à –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, –†–µ–º–æ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏, –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            parse_mode='HTML'
        )
        return SERVICES
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_name: {e}", exc_info=True)
        await handle_registration_error(update, context)
        return ConversationHandler.END

async def get_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç"""
    try:
        services = [s.strip() for s in update.message.text.split(',')]
        context.user_data['registration']['services'] = services
        await update.message.reply_text(
            "üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—ã</b> –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Ä–∞–±–æ—Ç (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n"
            "–ü—Ä–∏–º–µ—Ä: 1500, 2000, 1000",
            parse_mode='HTML'
        )
        return PRICES
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_services: {e}", exc_info=True)
        await handle_registration_error(update, context)
        return ConversationHandler.END

async def get_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        prices = [p.strip() for p in update.message.text.split(',')]
        services = context.user_data['registration']['services']
        
        if len(prices) != len(services):
            await update.message.reply_text(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –µ—â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return PRICES
        
        context.user_data['registration']['services_prices'] = dict(zip(services, prices))
        await update.message.reply_text("üè† –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞:", parse_mode='HTML')
        return ADDRESS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_prices: {e}", exc_info=True)
        await handle_registration_error(update, context)
        return ConversationHandler.END

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"""
    try:
        context.user_data['registration']['address'] = update.message.text
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è —Å–≤—è–∑–∏:", parse_mode='HTML')
        return PHONE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_address: {e}", exc_info=True)
        await handle_registration_error(update, context)
        return ConversationHandler.END

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        context.user_data['registration']['phone'] = update.message.text
        registration_data = context.user_data['registration']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        services_text = "\n".join(
            f"‚Ä¢ {service}: {price} —Ä—É–±." 
            for service, price in registration_data['services_prices'].items()
        )
        
        admin_message = (
            "üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
            f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {registration_data['name']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {registration_data['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {registration_data['phone']}\n\n"
            f"üõ†Ô∏è <b>–£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:</b>\n{services_text}\n\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}\n"
            f"Username: @{update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ username
        await context.bot.send_message(
            chat_id=ADMIN_USERNAME,
            text=admin_message,
            parse_mode='HTML'
        )
        
        keyboard = [
            [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
        ]
        
        await update.message.reply_text(
            f"‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>\n\n"
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_USERNAME}. "
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {registration_data}")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_phone: {e}", exc_info=True)
        await handle_registration_error(update, context)
        return ConversationHandler.END

async def handle_registration_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if 'registration' in context.user_data:
        del context.user_data['registration']
    
    keyboard = [
        [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    
    if update.message:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if 'registration' in context.user_data:
        del context.user_data['registration']
    
    keyboard = [
        [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    
    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    keyboard = [
        [InlineKeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ", callback_data='back_to_start')],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    if update.callback_query:
        await update.callback_query.message.reply_text(error_message, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(error_message, reply_markup=reply_markup)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_registration, pattern='^register_service$'),
            CommandHandler('register', start_registration)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
        ],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_services)],
            PRICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prices)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel_registration),
            CallbackQueryHandler(cancel_registration, pattern='^back_to_start$')
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()
if __name__ == '__main__':
    main()